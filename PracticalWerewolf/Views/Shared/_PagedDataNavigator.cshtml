@model PracticalWerewolf.ViewModels.Paged.PagedDataViewModel

@functions {
    string PageUrl(int page) {
        UriBuilder uriBuilder = new UriBuilder(Request.Url);
        var parameters = HttpUtility.ParseQueryString(Request.Url.Query);
        parameters["page"] = page.ToString();
        uriBuilder.Query = parameters.ToString();
        return uriBuilder.Uri.AbsoluteUri.ToString();
    }
}

<center>
    <nav aria-label="Page navigation">
        <ul class="pagination">
            <li class="@(Model.Page <= 0 ? " disabled" : "" )">
                <a href="@(Model.Page > 0 ? PageUrl(Model.Page - 1) : "#")" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>

            @{
                var min = Math.Max(0, Model.Page - 2);
                var max = Math.Min(min + 5, Model.TotalPages);

                for (var i = min; i < max; i++)
                {
                    <li class="@(i == Model.Page ? " active" : "" )">
                        <a href="@(i == Model.Page ? " #" : PageUrl(i) )">
                            @(i + 1)

                            @if (i == Model.Page)
                            {
                                @("of ") @Model.TotalPages
                                <span class="sr-only">(current page)</span>
                            }
                        </a>
                    </li>
                }
            }

            <li class="@(Model.Page+1 >= Model.TotalPages ? " disabled" : "")">
                <a href="@(Model.Page < Model.TotalPages-1 ? PageUrl(Model.Page + 1) : "#" )" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li>
        </ul>
    </nav>
</center>
